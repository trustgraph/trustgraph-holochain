#!/usr/bin/env bash
set -euo pipefail
# set -x

export CARGO_HOME=$(pwd)/.cargo
COLOR_HIGHLIGHT='\033[1;35m'
NO_COLOR='\033[0m'

main () {
  run_targets $*
}

run_targets () {
  for func in $*; do
    run $func
  done
}

run () {
  func=$1
  if [[ $(type -t $func) == function ]]; then
    $func
  else
    echo "Unknown command: ${func}"
    exit 1
  fi
}

shell () {
  if [[ -z $1 ]]; then
    echo "Error: \`shell\` called with no arguments"
    exit 1
  fi

  if [[ -n ${2:-} ]]; then
    echo "Error: \`shell\` called with more than one argument: $*"
    exit 1
  fi

  command=$(echo $1 | tr '\n' ' ' | tr -s ' ') # remove newlines, collapse spaces
  echo -e "${COLOR_HIGHLIGHT}----> ${command} ${NO_COLOR}"
  eval "$command"
}

in_test_env () {
  # shell "CARGO_TARGET_DIR=target/subdir"
  run_targets $*
}

# targets to be passed in as command line args:

checks () {
  time bin/run test clippy
}

test_watch () {
  shell "cargo watch -- bin/run test"
}

test_watch_clear () {
  shell "cargo watch --clear -- bin/run test"
}

test () {
  in_test_env build_dna test_metal
}

test_metal () {
  shell "time cargo test -- --nocapture"
}

build_watch () {
  shell "cargo watch -- bin/run build"
}

build_watch_clear () {
  shell "cargo watch --clear -- bin/run build"
}

build () {
  run build_happ
}

build_happ () {
  run build_dna
  shell "hc app pack workdir/happ"
}

build_dna () {
  run build_zome
  shell "hc dna pack workdir/dna"
}

build_zome () {
  shell "cargo build --release --target wasm32-unknown-unknown"
}

clippy () {
  shell "cargo clippy --all-targets --all-features -- -D warnings"
}

clippy_watch () {
  shell "cargo watch --clear -- bin/run clippy"
}

format () {
  shell "cargo fmt"
}

# you may need to:
# cargo install cargo-release
release_patch_dry () {
  shell "
    cargo release
      --dev-version
      --dev-version-ext 'dev'
      --no-publish
      --tag-prefix ''
      patch
  "
}

release_patch () {
  shell "
    cargo release
      --dev-version
      --dev-version-ext 'dev'
      --no-publish
      --tag-prefix ''
      --execute
      patch
  "
}

clean () {
  shell "rm -rf .cargo target"
  shell "git clean -Xfd"
  shell "cargo clean"
}

shipit () {
  run format
  if [[ -z $(git status --porcelain) ]]; then
    run checks
    shell "git push origin HEAD"
  else
    echo "Error: git status not clean (after formatting):"
    set -x
    git status
    exit 1
  fi
}

main $*
